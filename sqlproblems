1.
CREATE TABLE user(
    user_id varchar(255),
    action varchar(255) NOT NULL,
    date varchar(255)
);

INSERT INTO user(dates,items)
(1,'start', CAST('01-01-20' AS date)), 
(1,'cancel', CAST('01-02-20' AS date)), 
(2,'start', CAST('01-03-20' AS date)), 
(2,'publish', CAST('01-04-20' AS date)), 
(3,'start', CAST('01-05-20' AS date)), 
(3,'cancel', CAST('01-06-20' AS date)), 
(1,'start', CAST('01-07-20' AS date)), 
(1,'publish', CAST('01-08-20' AS date));

SELECT action,
SUM(CASE WHEN action = 'start' THEN 1 ELSE 0 END) AS 'start',
SUM(CASE WHEN action = 'publish' THEN 1 ELSE 0 END) AS 'publish',
SUM(CASE WHEN action = 'cancel' THEN 1 ELSE 0 END) AS 'cancel'
FROM user;

CREATE TABLE action(
    start int,
    publish int,
    cancel int
);

INSERT INTO action(start,publish, cancel)
VALUES (4,2,2); 

SELECT user_id,
1.0*publish/start AS publish_rate,
1.0*cancel/start AS cancel_rate
FROM action;

**************************************************************************************************
2.

WITH transactions (sender, receiver, amount, transaction_date) 
AS (VALUES 
(5, 2, 10, CAST('2-12-20' AS date)),
(1, 3, 15, CAST('2-13-20' AS date)), 
(2, 1, 20, CAST('2-13-20' AS date)), 
(2, 3, 25, CAST('2-14-20' AS date)), 
(3, 1, 20, CAST('2-15-20' AS date)), 
(3, 2, 15, CAST('2-15-20' AS date)), 
(1, 4, 5, CAST('2-16-20' AS date))),
-- sum amounts for each sender (debits) and receiver (credits)
debits AS (
SELECT sender, sum(amount) AS debited
FROM transactions
GROUP BY sender ),
credits AS (
SELECT receiver, sum(amount) AS credited
FROM transactions
GROUP BY receiver )
-- full (outer) join debits and credits tables on user id, taking net change as difference between credits and debits, coercing nulls to zeros with coalesce()
SELECT coalesce(sender, receiver) AS user, 
coalesce(credited, 0) - coalesce(debited, 0) AS net_change 
FROM debits d
FULL JOIN credits c
ON d.sender = c.receiver
ORDER BY 2 DESC


/*SELECT user,
SUM(amount)
FROM (
    SELECT sender AS user,
    (0 - amount) as amount
    FROM Transactions
    UNION ALL (
        SELECT receiver AS user,
        amount
        FROM Transactions
    )
) as U
GROUP BY user;*/

**********************************************************************************************************
3.
CREATE TABLE fruit(
    dates varchar(255),
    items varchar(255) NOT NULL,
);

INSERT INTO fruit(dates,items)
VALUES (CAST('01-01-20' AS date),'apple'), 
(CAST('01-01-20' AS date),'apple'), 
(CAST('01-01-20' AS date),'pear'), 
(CAST('01-01-20' AS date),'pear'), 
(CAST('01-02-20' AS date),'pear'), 
(CAST('01-02-20' AS date),'pear'), 
(CAST('01-02-20' AS date),'pear'), 
(CAST('01-02-20' AS date),'orange');


SELECT dates, items, count(*) AS item_count
FROM fruit
GROUP BY 1, 2
ORDER BY 1;

CREATE TABLE fruitcount(
    dates varchar(255),
    items varchar(255) NOT NULL,
    itemcount int
);

INSERT INTO fruitcount(dates,items, itemcount)
VALUES (CAST('01-01-20' AS date),'apple',2), 
(CAST('01-01-20' AS date),'pear',2), 
(CAST('01-02-20' AS date),'orange',1), 
(CAST('01-02-20' AS date),'pear',3);

SELECT *, rank() OVER (PARTITION by dates ORDER BY itemcount DESC) AS date_rank
FROM fruitcount;

CREATE TABLE fruitcountrank(
    dates varchar(255),
    items varchar(255) NOT NULL,
    itemcount int,
    datesrank int
);

INSERT INTO fruitcountrank(dates,items, itemcount, datesrank)
VALUES (CAST('01-01-20' AS date),'apple',2,1), 
(CAST('01-01-20' AS date),'pear',2,1), 
(CAST('01-02-20' AS date),'orange',1,1), 
(CAST('01-01-20' AS date),'pear',3,4);

SELECT dates, items
FROM fruitcountrank
WHERE datesrank = 1;

*********************************************************************************************************
4.
CREATE TABLE useractions(
    userid int,
    actions varchar(255) NOT NULL,
    actiondate varchar(255)
);

INSERT INTO useractions(userid,actions,actiondate)
VALUES 
(1, 'start', CAST('20-02-12' AS date)), 
(1, 'cancel', CAST('20-02-13' AS date)), 
(2, 'start', CAST('20-02-11' AS date)), 
(2, 'publish', CAST('20-02-14' AS date)), 
(3, 'start', CAST('20-02-15' AS date)), 
(3, 'cancel', CAST('20-02-15' AS date)), 
(4, 'start', CAST('20-02-18' AS date)), 
(1, 'publish', CAST('20-02-19' AS date));

SELECT *, row_number() OVER (PARTITION by userid ORDER BY actiondate DESC) AS daterank
FROM useractions;

CREATE TABLE useractionsrank(
    userid int,
    actions varchar(255) NOT NULL,
    actiondate varchar(255),
    daterank int
);

INSERT INTO useractionsrank(userid,actions,actiondate,daterank)
VALUES 
(1, 'start', CAST('20-02-19' AS date),1), 
(1, 'cancel', CAST('20-02-13' AS date),2), 
(2, 'start', CAST('20-02-12' AS date),3), 
(2, 'publish', CAST('20-02-14' AS date),1), 
(3, 'start', CAST('20-02-11' AS date),2), 
(3, 'cancel', CAST('20-02-15' AS date),1), 
(4, 'start', CAST('20-02-15' AS date),2), 
(1, 'publish', CAST('20-02-18' AS date),1);

SELECT *
FROM useractionsrank 
WHERE daterank = 1;

CREATE TABLE useractionsrank1(
    userid int,
    actions varchar(255) NOT NULL,
    actiondate varchar(255),
    daterank int
);

INSERT INTO useractionsrank1(userid,actions,actiondate,daterank)
VALUES 
(1, 'start', CAST('20-02-19' AS date),1), 
(2, 'publish', CAST('20-02-14' AS date),1), 
(3, 'cancel', CAST('20-02-15' AS date),1), 
(1, 'publish', CAST('20-02-18' AS date),1);

SELECT *
FROM useractionsrank 
WHERE daterank = 2;

CREATE TABLE useractionsrank2(
    userid int,
    actions varchar(255) NOT NULL,
    actiondate varchar(255),
    daterank int
);


INSERT INTO useractionsrank2(userid,actions,actiondate,daterank)
VALUES 
(1, 'cancel', CAST('20-02-13' AS date),2), 
(3, 'start', CAST('20-02-11' AS date),2), 
(4, 'start', CAST('20-02-15' AS date),2);

SELECT useractionsrank1.userid, 
       useractionsrank1.actiondate - useractionsrank2.actiondate AS dayselapsed
FROM useractionsrank1
LEFT JOIN useractionsrank2
ON useractionsrank1.userid = useractionsrank2.userid
ORDER BY 1;

*******************************************************************************************************
5.
CREATE TABLE superusers(
    userid int,
    productid int NOT NULL,
    transactiondate varchar(255)
);

INSERT INTO superusers(userid,productid,transactiondate)
VALUES 
(1, 101, CAST('20-02-12' AS date)), 
(2, 105, CAST('20-02-13' AS date)), 
(1, 111, CAST('20-02-14' AS date)), 
(3, 121, CAST('20-02-15' AS date)), 
(1, 101, CAST('20-02-16' AS date)), 
(2, 105, CAST('20-02-17' AS date)), 
(4, 101, CAST('20-02-16' AS date)), 
(3, 105, CAST('20-02-15' AS date));

SELECT *, row_number() OVER (PARTITION by userid ORDER BY transactiondate ASC) AS transactionnumber
FROM superusers;

CREATE TABLE superuserst1(
    userid int,
    productid int NOT NULL,
    transactiondate varchar(255),
    transactionnumber int
);

INSERT INTO superuserst1(userid,productid,transactiondate,transactionnumber)
VALUES 
(1, 101, CAST('20-02-12' AS date),1), 
(1, 115, CAST('20-02-14' AS date),2), 
(1, 101, CAST('20-02-16' AS date),3), 
(2, 105, CAST('20-02-13' AS date),1), 
(2, 105, CAST('20-02-17' AS date),2), 
(3, 121, CAST('20-02-15' AS date),1), 
(3, 105, CAST('20-02-15' AS date),2), 
(4, 101, CAST('20-02-16' AS date),1);

SELECT userid, transactiondate
FROM superuserst1
WHERE transactionnumber = 2; 

CREATE TABLE superusersd1(
    userid int,
    transactiondate varchar(255)
);

INSERT INTO superusersd1(userid,transactiondate)
VALUES 
(1, CAST('20-02-14' AS date)), 
(2, CAST('20-02-17' AS date)), 
(3, CAST('20-02-15' AS date));

SELECT DISTINCT userid
FROM superusers;

CREATE TABLE superusersdistinct(
    userid int,
PRIMARY KEY (Personid)
);
INSERT INTO `workbench`.`superusersdistinct` (`userid`) VALUES ('1');
INSERT INTO `workbench`.`superusersdistinct` (`userid`) VALUES ('2');
INSERT INTO `workbench`.`superusersdistinct` (`userid`) VALUES ('3');
INSERT INTO `workbench`.`superusersdistinct` (`userid`) VALUES ('4');

SELECT superusersdistinct.userid, transactiondate AS superuserdate
FROM superusersdistinct
LEFT JOIN superusersd1
ON superusersdistinct.userid = superusersd1.userid
ORDER BY 2;

**************************************************************************************************************
6.

CREATE TABLE friends(
    userid int,
    friends int NOT NULL
);

INSERT INTO friends(userid,friends)
VALUES 
(1, 2), (1, 3), (1, 4), (2, 1), (3, 1), (3, 4), (4, 1), (4, 3);

CREATE TABLE likes(
    userid int,
    pagelikes varchar(255) NOT NULL
);

INSERT INTO likes(userid,pagelikes)
VALUES 
(1, 'A'), (1, 'B'), (1, 'C'), (2, 'A'), (3, 'B'), (3, 'C'), (4, 'B');

SELECT friends.userid, likes.pagelikes, friends.friends
FROM likes 
JOIN friends 
ON likes.userid = friends.userid;

CREATE TABLE t1(
    userid int,
    pagelikes varchar(255) NOT NULL,
    friends int
);

INSERT INTO t1(userid,pagelikes,friends)
VALUES 
(1, 'C',2), (1, 'B',2), (1, 'A',2), (1, 'C',3), (1, 'B',3), (1, 'A',3), (1, 'C',4),
(1, 'B',4), (1, 'A',4), (2, 'A',1), (3, 'C',1), (3, 'B',1), (3, 'C',4), (3, 'B',4),
(1, 'B',1), (1, 'B',3);

SELECT t1.userid, t1.pagelikes, t1.friends, likes.pagelikes AS friendslikes
FROM t1
LEFT JOIN likes 
ON t1.friends = likes.userid
AND t1.pagelikes = likes.pagelikes;

CREATE TABLE t2(
    userid int,
    pagelikes varchar(255) NOT NULL,
    friends int,
    friendlikes varchar(255)
);

INSERT INTO t2(userid,pagelikes,friends,friendlikes)
VALUES 
(1, 'C',2,NULL), (1, 'B',2,NULL), (1, 'A',2,'A'), (1, 'C',3,'C'), (1, 'B',3,'B'), (1, 'A',3,NULL), (1, 'C',4,NULL),
(1, 'B',4,'B'), (1, 'A',4,NULL), (2, 'A',1,'A'), (3, 'C',1,'C'), (3, 'B',1,'B'), (3, 'C',4,NULL), (3, 'B',4,'B'),
(1, 'B',1,'B'), (1, 'B',3,'B');

SELECT DISTINCT friends AS userid, pagelikes AS recommendedpage
FROM t2
WHERE friendlikes IS NULL
ORDER BY 1 ASC;
****************************************************************************************************************
7.

CREATE TABLE mobile(
    userid int,
    pageurl varchar(255) 
);

INSERT INTO mobile(userid,pageurl)
VALUES 
(1, 'A'), (2, 'B'), (3, 'C'), (4, 'A'), (9, 'B'), (2, 'C'), (10, 'B');

CREATE TABLE web(
    userid int,
    pageurl varchar(255) 
);

INSERT INTO web(userid,pageurl)
VALUES 
(6, 'A'), (2, 'B'), (3, 'C'), (7, 'A'), (4, 'B'), (8, 'C'), (5, 'B');

SELECT DISTINCT mobile.userid AS mobileuser, web.userid AS webuser
FROM mobile 
CROSS JOIN web 
ON mobile.userid = web.userid;

CREATE TABLE mobileweb(
    mobileuser int,
    webuser int
);

INSERT INTO mobileweb(mobileuser,webuser)
VALUES 
(2, 2), (3, 3), (4, 4);

SELECT sum(CASE WHEN mobileuser IS NOT NULL AND webuser IS NULL THEN 1 ELSE 0 END ) AS nmobile,
        sum(CASE WHEN webuser IS NOT NULL AND mobileuser IS NULL THEN 1 ELSE 0 END ) AS nweb,
        sum(CASE WHEN webuser IS NOT NULL AND mobileuser IS NOT NULL THEN 1 ELSE 0 END ) AS nboth, 
        count(*) AS ntotal
	FROM mobileweb;

CREATE TABLE mobilesum(
    nmobile int,
    nweb int,
    nboth int,
    ntotal int
);

INSERT INTO mobilesum(nmobile, nweb, nboth, ntotal)
VALUES 
(3, 4, 3, 10);

SELECT 1.0*nmobile/ntotal AS mobilefraction, 
        1.0*nweb/ntotal AS webfraction, 
        1.0*nboth/ntotal AS bothfraction
FROM mobilesum;

8.
****************************************************************************************************
CREATE TABLE upgradeuser(
    userid int,
    name varchar(255),
    transactiondate varchar(255)
);

INSERT INTO upgradeuser(userid,name,transactiondate)
VALUES 
(1, 'Jon', CAST('20-02-14' AS date)), 
(2, 'Jane', CAST('20-02-14' AS date)), 
(3, 'Jill', CAST('20-02-15' AS date)), 
(4, 'Josh', CAST('20-02-15' AS date)), 
(5, 'Jean', CAST('20-02-16' AS date)), 
(6, 'Justin', CAST('20-02-17' AS date)), 
(7, 'Jeremy', CAST('20-02-18' AS date));

CREATE TABLE events(
    userid int,
    type varchar(255),
    transactiondate varchar(255)
);

INSERT INTO events(userid,type,transactiondate)
VALUES 
(1, 'F1', CAST('20-03-01' AS date)), 
(2, 'F2', CAST('20-3-02' AS date)), 
(3, 'P', CAST('20-03-12' AS date)), 
(4, 'F2', CAST('20-03-15' AS date)), 
(5, 'F2', CAST('20-03-15' AS date)), 
(6, 'P', CAST('20-03-16' AS date)), 
(7, 'P', CAST('20-03-22' AS date));

SELECT userid, type, transactiondate AS f2_date
FROM events
WHERE type = 'F2'; 

CREATE TABLE f2(
    userid int,
    type varchar(255),
    transactiondate varchar(255)
);

INSERT INTO f2(userid,type,transactiondate)
VALUES 
(2, 'F2', CAST('20-03-02' AS date)), 
(4, 'F2', CAST('20-03-15' AS date)), 
(5, 'F2', CAST('20-03-15' AS date));

SELECT userid, type, transactiondate AS premiumdate
FROM events
WHERE type = 'P'; 

CREATE TABLE premium(
    userid int,
    type varchar(255),
    transactiondate varchar(255)
);

INSERT INTO premium(userid,type,transactiondate)
VALUES 
(3, 'P', CAST('20-03-12' AS date)), 
(6, 'P', CAST('20-03-16' AS date)), 
(7, 'P', CAST('20-03-22' AS date));

SELECT premium.transactiondate - upgradeuser.transactiondate AS upgradetime
FROM upgradeuser 
JOIN f2
ON upgradeuser.userid = f2.userid
LEFT JOIN premium
ON upgradeuser.userid = premium.userid;

CREATE TABLE t3(
    userid int,
    type varchar(255),
    transactiondate varchar(255)
);

INSERT INTO premium(userid,type,transactiondate)
VALUES 
(3, 'P', CAST('20-03-12' AS date)), 
(6, 'P', CAST('20-03-16' AS date)), 
(7, 'P', CAST('20-03-22' AS date));

SELECT round(1.0*sum(CASE WHEN upgradetime < 30 THEN 1 ELSE 0 END)/count(*), 2) AS upgraderate
FROM t3;

***********************************************************************************************************************
9.
CREATE TABLE mostfriends(
    user1 int,
    user2 int
);

INSERT INTO mostfriends(user1, user2)
VALUES 
(1,2), 
(1,3),
(1,4),
(2,3);

SELECT user1 AS userid
FROM mostfriends
UNION ALL
SELECT user2 AS userid
FROM mostfriends; 

CREATE TABLE mostfriend(
    userid int
);

INSERT INTO `workbench`.`mostfriend` (`userid`) VALUES ('1');
INSERT INTO `workbench`.`mostfriend` (`userid`) VALUES ('1');
INSERT INTO `workbench`.`mostfriend` (`userid`) VALUES ('1');
INSERT INTO `workbench`.`mostfriend` (`userid`) VALUES ('2');
INSERT INTO `workbench`.`mostfriend` (`userid`) VALUES ('2');
INSERT INTO `workbench`.`mostfriend` (`userid`) VALUES ('3');
INSERT INTO `workbench`.`mostfriend` (`userid`) VALUES ('4');
INSERT INTO `workbench`.`mostfriend` (`userid`) VALUES ('3');

SELECT userid, count(*) AS friendcount
FROM mostfriend
GROUP BY 1
ORDER BY 2 DESC, 1 ASC;

*****************************************************************************************************************************
10.
WITH projects (task_id, start_date, end_date) 
AS (VALUES 
(1, CAST('10-01-20' AS date), CAST('10-02-20' AS date)), 
(2, CAST('10-02-20' AS date), CAST('10-03-20' AS date)), 
(3, CAST('10-03-20' AS date), CAST('10-04-20' AS date)), 
(4, CAST('10-13-20' AS date), CAST('10-14-20' AS date)), 
(5, CAST('10-14-20' AS date), CAST('10-15-20' AS date)), 
(6, CAST('10-28-20' AS date), CAST('10-29-20' AS date)), 
(7, CAST('10-30-20' AS date), CAST('10-31-20' AS date))),
-- get start dates not present in end date column (these are “true” project start dates) 
t1 AS (
SELECT start_date
FROM projects
WHERE start_date NOT IN (SELECT end_date FROM projects) ),
-- get end dates not present in start date column (these are “true” project end dates) 
t2 AS (
SELECT end_date
FROM projects
WHERE end_date NOT IN (SELECT start_date FROM projects) ),
-- filter to plausible start-end pairs (start < end), then find correct end date for each start date (the minimum end date, since there are no overlapping projects)
t3 AS (
SELECT start_date, min(end_date) AS end_date
FROM t1, t2
WHERE start_date < end_date
GROUP BY start_date )
SELECT *, end_date - start_date AS project_duration
FROM t3
ORDER BY project_duration ASC, start_date ASC

